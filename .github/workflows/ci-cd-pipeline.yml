name: CI/CD Pipeline for EMS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Backend with Maven
        run: mvn clean install

      - name: Archive JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: target/*.jar
          retention-days: 90  # Ensure artifact is not expired before deployment

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm install
        working-directory: frontend

      - name: Build React App
        run: npm run build
        working-directory: frontend

      - name: Verify Build Output
        run: ls -l frontend/build  # Debugging step to check if build directory exists

      - name: Archive Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: frontend/build/**
          retention-days: 90  # Ensure artifact is not expired before deployment
          
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-artifact
          path: backend

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: frontend

      - name: Verify Artifacts
        run: |
          echo "Checking backend artifact..."
          ls -l backend
          echo "Checking frontend artifact..."
          ls -l frontend

      - name: Deploy to Remote VM
        env:
          SSH_PRIMARY_KEY: ${{ secrets.SSH_PRIMARY_KEY }}
          REMOTE_USER: "ubuntu"
          REMOTE_HOST: "your-vm-ip"
        run: |
          echo "$SSH_PRIMARY_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$REMOTE_HOST << 'EOF'
            mkdir -p /home/ubuntu/ems/backend
            mkdir -p /home/ubuntu/ems/frontend
          EOF
          
          scp -o StrictHostKeyChecking=no -i private_key.pem -r backend/*.jar $REMOTE_USER@$REMOTE_HOST:/home/ubuntu/ems/backend/
          scp -o StrictHostKeyChecking=no -i private_key.pem -r frontend/* $REMOTE_USER@$REMOTE_HOST:/home/ubuntu/ems/frontend/

          ssh -o StrictHostKeyChecking=no -i private_key.pem $REMOTE_USER@$REMOTE_HOST << 'EOF'
            pkill -f 'backend/.*\.jar' || true
            chmod +x /home/ubuntu/ems/backend/*.jar
            nohup java -jar /home/ubuntu/ems/backend/*.jar > /home/ubuntu/ems/backend/app.log 2>&1 &

            sudo rm -rf /var/www/html/*
            sudo cp -r /home/ubuntu/ems/frontend/* /var/www/html/
            sudo systemctl restart nginx || echo "Nginx not installed, skipping..."
          EOF

      - name: Cleanup
        run: rm -f private_key.pem
